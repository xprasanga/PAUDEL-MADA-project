---
title: "statistical-analysis"
format: html
editor: visual
---

We will load the necessary libraries.

```{r}
# Load necessary libraries
library(dplyr)
library(tidyr)
library(broom)      
library(webshot)
library(magick)
library(here)
library(modelsummary)
library(plm)
library(lmtest)
library(gt)
library(webshot2)
library(fixest)
library(lubridate)
library(Metrics)
library(kableExtra)
library(here)

```

# Importing datasets

Then we will import the dataset.

```{r}
#Path to data. 
data_location <- here::here("data","processed-data","processeddata.rds")
#load data
mydata <- readRDS(data_location)
```

We will now pick the most useful variables from the large pool of 1400+ variables in our dataset, and we will then categorize these variables based on the aspects they cover. For example, if there is avariable named "Annual GDP growth", we will categorize it as an "Economic" variable. Similarly, if there is a variable named "Unemployment rate" or "Total population", we will categorize them as "Social" variable.

But, before that we will import the training data which was obtained after splitting the dataset into 80% train data and 20% test data. We will be performing all our analysis on train data.

```{r}
train <- readRDS(here("data", "processed-data", "train-data.rds"))
test <- readRDS(here("data", "processed-data", "test-data.rds"))
```

# Grouping the variables.

```{r}

#defining the dependent variable
dependent_var <- "Current_health_expenditure_per_capita_current_US"

#selecting 50 variables that are likely to predict the dependent variable
selected_vars <- c(
  # Economic Factors
  "GDP_per_capita_current_US", "GNI_per_capita_Atlas_method_current_US", "GDP_growth_annual_",
  "Inflation_GDP_deflator_annual_", "Domestic_credit_provided_by_financial_sector__of_GDP",
  "Gross_capital_formation__of_GDP", "Exports_of_goods_and_services__of_GDP",
  "Imports_of_goods_and_services__of_GDP", "Foreign_direct_investment_net_inflows_BoP_current_US",
  "Industry_including_construction_value_added__of_GDP", "Agriculture_forestry_and_fishing_value_added__of_GDP",
  "Services_value_added__of_GDP", "Unemployment_total__of_total_labor_force_modeled_ILO_estimate",
  "Income_share_held_by_lowest_20", "Income_share_held_by_highest_20", "Poverty_headcount_ratio_at_215_a_day_2017_PPP__of_population",
  
  # Health Factors
  "Life_expectancy_at_birth_total_years", "Mortality_rate_under5_per_1000_live_births",
  "Prevalence_of_HIV_total__of_population_ages_1549", "Immunization_measles__of_children_ages_1223_months",
  "Births_attended_by_skilled_health_staff__of_total", "Contraceptive_prevalence_any_method__of_married_women_ages_1549",
  "Hospital_beds_per_1000_people", "Physicians_per_1000_people", "Prevalence_of_underweight_weight_for_age__of_children_under_5",
  "Adolescent_fertility_rate_births_per_1000_women_ages_1519", "Current_health_expenditure__of_GDP",
  "Domestic_general_government_health_expenditure__of_GDP",
  
  # Social Factors
  "Population_total", "Population_growth_annual_", "Population_density_people_per_sq_km_of_land_area",
  "Urban_population__of_total_population", "Rural_population__of_total_population",
  "Literacy_rate_adult_total__of_people_ages_15_and_above", "School_enrollment_primary__gross",
  "School_enrollment_secondary__gross", "School_enrollment_tertiary__gross", "Unemployment_youth_total__of_total_labor_force_ages_1524_modeled_ILO_estimate",
  "Net_migration", "Refugee_population_by_country_or_territory_of_asylum",
  
  # Government Factors
  "Military_expenditure__of_GDP", "Tax_revenue__of_GDP", "Government_expenditure_on_education_total__of_GDP",
  "Government_Effectiveness_Estimate", "Rule_of_Law_Estimate", "Control_of_Corruption_Estimate",
  "Political_Stability_and_Absence_of_ViolenceTerrorism_Estimate", "Regulatory_Quality_Estimate",
  
  # Trade Factors
  "Trade__of_GDP", "Merchandise_trade__of_GDP", "Exports_of_goods_and_services_current_US",
  "Imports_of_goods_and_services_current_US", "Foreign_direct_investment_net_inflows_BoP_current_US",
  "External_debt_stocks_total_DOD_current_US", "Net_barter_terms_of_trade_index_2015__100"
)

# Add the dependent variable to the selected variables
selected_vars <- c(dependent_var, selected_vars)

# Subset the dataset with the selected variables
train_selected <- train %>%
  select(all_of(selected_vars))

# Categorize the selected variables
variable_categories <- list(
  Economic = c("GDP_per_capita_current_US", "GNI_per_capita_Atlas_method_current_US", "GDP_growth_annual_",
               "Inflation_GDP_deflator_annual_", "Domestic_credit_provided_by_financial_sector__of_GDP",
               "Gross_capital_formation__of_GDP", "Exports_of_goods_and_services__of_GDP",
               "Imports_of_goods_and_services__of_GDP", "Foreign_direct_investment_net_inflows_BoP_current_US",
               "Industry_including_construction_value_added__of_GDP", "Agriculture_forestry_and_fishing_value_added__of_GDP",
               "Services_value_added__of_GDP", "Unemployment_total__of_total_labor_force_modeled_ILO_estimate",
               "Income_share_held_by_lowest_20", "Income_share_held_by_highest_20", "Poverty_headcount_ratio_at_215_a_day_2017_PPP__of_population"),
  
  Health = c("Life_expectancy_at_birth_total_years", "Mortality_rate_under5_per_1000_live_births",
             "Prevalence_of_HIV_total__of_population_ages_1549", "Immunization_measles__of_children_ages_1223_months",
             "Births_attended_by_skilled_health_staff__of_total", "Contraceptive_prevalence_any_method__of_married_women_ages_1549",
             "Hospital_beds_per_1000_people", "Physicians_per_1000_people", "Prevalence_of_underweight_weight_for_age__of_children_under_5",
             "Adolescent_fertility_rate_births_per_1000_women_ages_1519", "Current_health_expenditure__of_GDP",
             "Domestic_general_government_health_expenditure__of_GDP"),
  
  Social = c("Population_total", "Population_growth_annual_", "Population_density_people_per_sq_km_of_land_area",
             "Urban_population__of_total_population", "Rural_population__of_total_population",
             "Literacy_rate_adult_total__of_people_ages_15_and_above", "School_enrollment_primary__gross",
             "School_enrollment_secondary__gross", "School_enrollment_tertiary__gross", "Unemployment_youth_total__of_total_labor_force_ages_1524_modeled_ILO_estimate",
             "Net_migration", "Refugee_population_by_country_or_territory_of_asylum"),
  
  Government = c("Military_expenditure__of_GDP", "Tax_revenue__of_GDP", "Government_expenditure_on_education_total__of_GDP",
                 "Government_Effectiveness_Estimate", "Rule_of_Law_Estimate", "Control_of_Corruption_Estimate",
                 "Political_Stability_and_Absence_of_ViolenceTerrorism_Estimate", "Regulatory_Quality_Estimate"),
  
  Trade = c("Trade__of_GDP", "Merchandise_trade__of_GDP", "Exports_of_goods_and_services_current_US",
            "Imports_of_goods_and_services_current_US", "Foreign_direct_investment_net_inflows_BoP_current_US",
            "External_debt_stocks_total_DOD_current_US", "Net_barter_terms_of_trade_index_2015__100")
)

# Print the categorized variables
print(variable_categories)
```

Now that we have selected our variables, we will try to look at the relation between our dependent variable "Health Expenditure Per Capita \$USD" with other variables from a specific category.

# Preliminary Regression

```{r}

# Function to run regression for a specific category of independent variables
run_regression <- function(data, category_vars, category_name) {
  # dropping variables with all NA values within the category
  category_vars <- category_vars[sapply(data[category_vars], function(x) !all(is.na(x)))]
  
  # If no variables are left after dropping, return NULL
  if (length(category_vars) == 0) {
    return(NULL)
  }
  
  # creating a subset of data with the dependent variable and independent variables
  regression_data <- data %>%
    select(Current_health_expenditure_per_capita_current_US, all_of(category_vars)) %>%
    na.omit()  # Remove rows with NA values
  
  # checking if there are enough rows to run the regression
  if (nrow(regression_data) == 0) {
    return(NULL)
  }
  
  # creating the regression formula
  formula <- as.formula(paste("Current_health_expenditure_per_capita_current_US ~", 
                              paste(category_vars, collapse = " + ")))
  
  # Run the regression
  regression_model <- lm(formula, data = regression_data)
  
  # Tidy up the regression results and add a "Significant" column
  tidy_results <- tidy(regression_model) %>%
    mutate(
      Category = category_name,
      Significant = ifelse(p.value <= 0.05, "YES", "NO")  # Add significance column
    )
  
  return(tidy_results)
}

# Run regression for each category and create tables
economic_results <- run_regression(train, variable_categories$Economic, "Economic")
health_results <- run_regression(train, variable_categories$Health, "Health")
social_results <- run_regression(train, variable_categories$Social, "Social")
government_results <- run_regression(train, variable_categories$Government, "Government")
trade_results <- run_regression(train, variable_categories$Trade, "Trade")

# combine all results into one table
all_results <- bind_rows(
  economic_results,
  health_results,
  social_results,
  government_results,
  trade_results
)

# ensuring the "Significant" column has no NA values
all_results <- all_results %>%
  mutate(Significant = ifelse(is.na(Significant), "NO", Significant))  # Replace NA with "NO"

# Rename the "term" column to "Predictor variables"
all_results <- all_results %>%
  rename(`Predictor variables` = term)

# Adding category separators
all_results <- all_results %>%
  group_by(Category) %>%
  group_modify(~ {
    # Add a separator row before each category
    separator_row <- tibble(
      `Predictor variables` = paste("Independent variables from", .y$Category, "category"),
      estimate = NA, std.error = NA, statistic = NA, p.value = NA, Significant = NA
    )
    bind_rows(separator_row, .x)
  }) %>%
  ungroup()

# creating an advanced table using kableExtra
table_html <- all_results %>%
  kable("html", caption = "Regression Results by Category") %>%
  kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive")) %>%
  scroll_box(width = "100%", height = "500px") %>%
  row_spec(which(all_results$Significant == "YES"), background = "#D9F2D9") %>%  # Highlight significant rows in green
  row_spec(which(all_results$`Predictor variables` %in% paste("Independent variables from", unique(all_results$Category), "category")), 
           bold = TRUE, background = "#FFA500") %>%  # Highlight separator rows in orange
  column_spec(1, bold = TRUE)  # Bold the "Predictor variables" column

# Display the table
table_html
```

In the above table, we can observe that a lot of factors affect the dependent variable and a lot of them don't. We can also observe that a lot of our variables have missing values making it unavailable for the regression estimation.

Now, we will save our regression result is a HTML table so that we can use to present it in our manuscript.

```{r}
# Save the table as a HTML file
html_file <- here("products", "supplementary-files", "regression_results.html")
save_kable(table_html, file = html_file)

```

Now that we have tested some variables in our model across different categories, we will pick the most useful variable and add them into our preliminary model. We will also add other variable that were not present in the above table. Variable selection is a continuous process and the variables selected in the preliminary model may also be dropped later to make space for new variables that may appear as important.

# Suggested Model

```{r}
# preliminary regression model

model1 <- lm(Current_health_expenditure_per_capita_current_US ~ 
              GDP_growth_annual_ + 
              Income_share_held_by_lowest_20 + 
              Control_of_Corruption_Estimate + 
              Life_expectancy_at_birth_total_years + 
Unemployment_youth_total__of_total_labor_force_ages_1524_modeled_ILO_estimate + 
              Trade__of_GDP+ Foreign_direct_investment_net_inflows_BoP_current_US+
  Access_to_electricity_rural__of_rural_population +
  Age_dependency_ratio__of_workingage_population +
  Military_expenditure__of_GDP +
  Literacy_rate_adult_total__of_people_ages_15_and_above
  
  , 
            data = train)

modelsummary(
  model1,
  output = here("results", "tables", "preliminary_regression_results.png"),
  title = "This table represents the preliminary regresssion model",
  stars = c('*' = 0.1, '**' = 0.05, '***' = 0.01),
  notes = list(
    "Standard errors are shown in parentheses.",
    "Significance levels: * p < 0.1, ** p < 0.05, *** p < 0.01."
  )
)

```

However, due to the missing values in the independent variables the total number of observation used in the regression is too low. So, we will use such variables which are available as much as possible for all countries.

# Primary regression model

```{r}
# primary regression model

model <- lm(Current_health_expenditure_per_capita_current_US ~ 
              GDP_growth_annual_ + 
              Income_share_held_by_lowest_20 + 
              Control_of_Corruption_Estimate + 
              Life_expectancy_at_birth_total_years + 
Unemployment_youth_total__of_total_labor_force_ages_1524_modeled_ILO_estimate + 
              Trade__of_GDP+ Foreign_direct_investment_net_inflows_BoP_current_US+
  Access_to_electricity_rural__of_rural_population +
  Age_dependency_ratio__of_workingage_population
  , 
            data = train)

modelsummary(
  model,
  output = here("results", "tables", "primary_regression_results.png"),
  title = "This table represents the primary regresssion model",
  stars = c('*' = 0.1, '**' = 0.05, '***' = 0.01),
  notes = list(
    "Standard errors are shown in parentheses.",
    "Significance levels: * p < 0.1, ** p < 0.05, *** p < 0.01."
  )
)

```

The variables have a significant impact on the dependent variable as expected. But, as this is a time series dataset, we must also test for autocorrelation. There are many other tests as well which can be performed on time-series models such ADF test for unit root, and complex models for variance modelling such as ARCH and GARCH can also be used. However, we will only perform simple procedures and try to build a simple model.

# Autocorrelation test

Below, we will perform the autocorrelation test.

```{r}

# Perform the Durbin-Watson test
dw_test <- dwtest(model)

# Extract the test statistic and p-value
dw_statistic <- dw_test$statistic
dw_p_value <- dw_test$p.value

# Create a data frame with the results
dw_results <- data.frame(
  Statistic = dw_statistic,
  P_Value = dw_p_value
)

# Generate a table using gt
dw_table <- gt(dw_results) %>%
  tab_header(
    title = "Durbin-Watson Test Results"
  ) %>%
  fmt_number(
    columns = vars(Statistic, P_Value),
    decimals = 4
  )

# Define the file path for the PNG
png_file <- here::here("results", "figures", "durbin_watson_test_results.png")

# Save the table as a PNG file
gtsave(dw_table, png_file)

```

Fortunately, the Durbin-Watson test is insignificant, and our model does not show presence of autocorrelation.

We can therefore move forward with this model.

# Null Model

Calculating the RMSE of a NULL Model.

```{r}
null_model <- lm(Current_health_expenditure_per_capita_current_US ~ 1, 
                 data = train)


# Calculate residuals
residuals <- residuals(null_model)

# Calculate RMSE manually
null_rmse <- sqrt(mean(residuals^2))

# Display results
summary(null_model)
cat("\nNull Model RMSE:", null_rmse, "\n")
```

# ADF test

ADF test (combined)

```{r}
library(plm)

#handling NAs first
train_clean <- na.omit(train[, c("CountryName", "Year", "Current_health_expenditure_per_capita_current_US")])

# time dimensions
time_counts <- table(train_clean$country)
print(time_counts)

# Fisher-type test with reduced lags
pdata <- pdata.frame(train_clean, index = c("CountryName", "Year"))
fisher_test <- purtest(pdata$Current_health_expenditure_per_capita_current_US,
                      test = "madwu",
                      exo = "intercept",
                      lags = 1) # Force shorter lags

```

ADF test (combined) continued....

```{r}


# 1. Creating properly formatted results table
unit_root_table <- data.frame(
  Test = "Fisher-Type Panel Unit Root Test (ADF)",
  Statistic = fisher_test$statistic$statistic,
  DF = fisher_test$statistic$parameter,
  `p-value` = fisher_test$statistic$p.value,
  check.names = FALSE
)

# creating and save HTML table
unit_root_table %>%
  kbl(format = "html", digits = 4, align = "c",
      caption = "") %>%
  kable_styling(bootstrap_options = c("striped", "hover")) %>%
  add_footnote("", 
              notation = "none") %>%
  save_kable(here("results", "tables", "unit_root_results.html"))
```

ADF test (Individual countries)

```{r}
library(tseries)

# adf result
adf_results <- lapply(split(train, train$CountryName), function(df) {
  if (sum(!is.na(df$Current_health_expenditure_per_capita_current_US)) >= 3) {
    tryCatch({
      adf.test(na.omit(df$Current_health_expenditure_per_capita_current_US))
    }, error = function(e) {
      return(list(statistic = NA, p.value = NA, 
                 note = paste("Error:", e$message)))
    })
  } else {
    return(list(statistic = NA, p.value = NA, 
               note = "Not enough observations"))
  }
})

# Create a clean results table
results_table <- do.call(rbind, lapply(names(adf_results), function(CountryName) {
  res <- adf_results[[CountryName]]
  data.frame(
    Country = CountryName,
    ADF_Statistic = ifelse(is.null(res$statistic), NA, res$statistic),
    P_Value = ifelse(is.null(res$p.value), NA, res$p.value),
    Note = ifelse(is.null(res$note), "", res$note)
  )
}))

print(results_table)
```

We will also test another version of our primary model excluding life expectancy to test if the results differ.

# Regression model without Life Expectancy

```{r}
# primary regression model without LE

model2 <- lm(Current_health_expenditure_per_capita_current_US ~ 
              GDP_growth_annual_ + 
              Income_share_held_by_lowest_20 + 
              Control_of_Corruption_Estimate + 
Unemployment_youth_total__of_total_labor_force_ages_1524_modeled_ILO_estimate + 
              Trade__of_GDP+ Foreign_direct_investment_net_inflows_BoP_current_US+
  Access_to_electricity_rural__of_rural_population +
  Age_dependency_ratio__of_workingage_population
  , 
            data = train)

modelsummary(
  model2,
  output = here("results", "tables", "primary_regression_excl_LE.png"),
  title = "This table represents the primary regresssion model without life expectancy",
  stars = c('*' = 0.1, '**' = 0.05, '***' = 0.01),
  notes = list(
    "Standard errors are shown in parentheses.",
    "Significance levels: * p < 0.1, ** p < 0.05, *** p < 0.01."
  )
)

```

We can observe that the estimates and standard error don't change much even after the exclusion of life expectancy at birth, so our suspicion of endogeniety might not be that serious.
